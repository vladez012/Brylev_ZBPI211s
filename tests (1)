
# In[2]:


def test_problem(func, test_data):
  for inputs, true_answer in test_data:
      if isinstance(inputs, tuple):
          answer = func(*inputs)
      else:
          answer = func(inputs)
      if answer != true_answer:
        print(answer, true_answer, inputs)
        return 0
  return 1


# In[3]:


def test_fact(fact_func):
    test_data = [
        (1, 1),(2, 2),(3, 6),(4, 24),(5, 120),(6, 720),(7, 5040),(8, 40320),(9, 362880),(10, 3628800),(11, 39916800),(12, 479001600),(13, 6227020800),(14, 87178291200),(15, 1307674368000),(16, 20922789888000),(17, 355687428096000),(18, 6402373705728000),(19, 121645100408832000),(20, 2432902008176640000),(21, 51090942171709440000),(22, 1124000727777607680000),(23, 25852016738884976640000),(24, 620448401733239439360000),(25, 15511210043330985984000000),(26, 403291461126605635584000000),(27, 10888869450418352160768000000),(28, 304888344611713860501504000000),(29, 8841761993739701954543616000000),(30, 265252859812191058636308480000000)
    ]
    return test_problem(fact_func, test_data)


# In[17]:


def test_filter_even(filter_even_func):
    test_data = [
        ([1], []),
        ([1, 2], [2]),
        ([1, 2, 3], [2]),
        ([1, 2, 3, 4], [2, 4]),
        ([1, 2, 3, 4, 5], [2, 4]),
        ([1, 2, 3, 4, 5, 6], [2, 4, 6]),
        ([1, 2, 3, 4, 5, 6, 7], [2, 4, 6]),
        ([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 8]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [2, 4, 6, 8, 10]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [2, 4, 6, 8, 10, 12]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [2, 4, 6, 8, 10, 12]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [2, 4, 6, 8, 10, 12, 14]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 4, 6, 8, 10, 12, 14]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [2, 4, 6, 8, 10, 12, 14, 16]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [2, 4, 6, 8, 10, 12, 14, 16]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [2, 4, 6, 8, 10, 12, 14, 16, 18]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [2, 4, 6, 8, 10, 12, 14, 16, 18]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]),
        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30])
              ]
    return test_problem(filter_even_func, test_data)


# 3.

# In[33]:


def test_square(square_func):
    test_data = ([1], [1]),([1, 2], [1, 4]),([1, 2, 3], [1, 4, 9]),([1, 2, 3, 4], [1, 4, 9, 16]),([1, 2, 3, 4, 5], [1, 4, 9, 16, 25]),([1, 2, 3, 4, 5, 6], [1, 4, 9, 16, 25, 36]),([1, 2, 3, 4, 5, 6, 7], [1, 4, 9, 16, 25, 36, 49]),([1, 2, 3, 4, 5, 6, 7, 8], [1, 4, 9, 16, 25, 36, 49, 64]),([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 4, 9, 16, 25, 36, 49, 64, 81]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841]),([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900])
    return test_problem(square_func, test_data)


# In[82]:




def test_palindrome(palindrome_func):
    test_data = [
        ('А в Енисее — синева.', "YES"),('А луна канула.', "YES"),('А муза рада музе без ума да разума.', "YES"),('Аргентина манит негра.', "YES"),('А роза упала на лапу Азора.', "YES"),('А щётка – как тёща!', "YES"),('Веер веял для евреев.', "YES"),('Вот сила типа капиталистов.', "YES"),('Голод долог.', "YES"),('Громилы мыли морг.', "YES"),('Дорого небо, да надобен огород.', "YES"),('Ешь немытого ты меньше!', "YES"),('И мал Иван, а лупил у лип улана вилами!', "YES"),('Ишаку казак сено нес, казаку каши.', "YES"),('Карабаса-Барабаса барак мал куклам.', "NO"),('Кот ужу жуток.', "YES"),('Кот учен, но как он нечуток.', "YES"),('Коту скоро сорок суток.', "YES"),('Коту хорош и шорох уток.', "YES"),('Кулинар, храни лук.', "YES"),('Лапоть топал.', "YES"),('Лег на храм, и дивен и невидим архангел.', "YES"),('Лезу на санузел.', "YES"),('Летя, догонит иного дятел.', "YES"),('Лёша на полке клопа нашёл.', "YES"),("Я есть Грут", "NO"),("Чем дальше -- тем лучше", "NO"),("Цзюнь-цзы есть благородный муж", "NO"),("Сяожень -- низкий крестьянин", "NO"),("Полезность женьшеня подтверждена многочисленными исследованиями...", "NO")
    ]
    return test_problem(palindrome_func, test_data)


# In[85]:


def test_decode_ch(decode_ch_func):

    test_data = [
        ("NOTiFICaTiON","АзотКислородТитанФторЙодКальцийТитанКислородАзот")
    ]

    return test_problem(decode_ch_func, test_data)

# In[98]:


def test_calculate(calculate_func):

    with open("test_output_file_1.txt") as f:
        test_output_file_1 = f.read()
    test_data = [

    ("test_input_file_1.txt", test_output_file_1)
    ]
    return test_problem(calculate_func, test_data)


# In[103]:


def test_substring_slice(substring_slice_func):

    with open("test_output_file_2.txt") as f:
        test_output_file_2 = f.read()
    test_data = [

    (("test_import_file_2_1.txt", "test_import_file_2_2.txt"), test_output_file_2)
    ]
    return test_problem(substring_slice_func, test_data)


# In[ ]:


def test_bin_search(bin_search):
    a = [i for i in range(10)]
    test_data = [
                  (([2,5,7,9,11,17,222], 11), 4),
                  (([2,5,7,9,11,17,222], 12), -1),
                  (([1, 3, 6], 6), 2),
                  (([22222], 6), -1),
                  ((a, -6), -1),
                  ((a, 1), 1),
                  (([2,5,33, 222], 33), 2),
                  (([32, 32, 32, 32], 12), -1),
                  (([0, 1, 3], 0), 0),
                  (([-3, 0, 1], -3), 0),
                  (([-3, -3, 0], -3), 1),
                  (([1, 2, 3, 4, 5], -3), -1),
                  (([-3, -3, 0], -3), 1),
                  (([-3, -3, 0], 3), -1),
                  (([4, 6, 8, 9], 0), -1),
                  (([4, 6, 8, 9], 4), 0),
                  (([4, 6, 8, 9], 6), 1),
                  (([4, 6, 8, 9], 8), 2),
                  (([4, 6, 8, 9], 9), 3),
                  (([22222], 22222), 0),
                  (([2,5,5,7,7,9,9,11,11,17,17,222], 11), 8),
                  (([2,5,5,7,7,9,9,11,11,17,17,222], 17), 10),
                  (([2,5,5,7,7,9,9,11,11,17,17,222], 22), -1),
                  (([2,5,5,7,7,9,9,11,11,17,17,222], -11), -1),
                  (([-22,-22,-2,-2,1,1], -1), -1),
                  (([-22,-22,-2,-2,1,1], -22), 0),

              ]
    return test_problem(bin_search, test_data)



